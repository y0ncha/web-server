{
  "info": {
    "name": "Web Server Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET /health",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/health",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["health"]
        }
      },
      "description": "Health check endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Body contains assignment string\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"Computer Networks Web Server Assignment\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET / (default index.html)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": [""]
        }
      },
      "description": "Loads index.html via root path",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type is text/html\", function () {",
              "    pm.response.to.have.header(\"Content-Type\", \"text/html\");",
              "});",
              "// Save headers for HEAD comparison",
              "pm.environment.set(\"index_content_type\", pm.response.headers.get(\"Content-Type\"));",
              "pm.environment.set(\"index_content_length\", pm.response.headers.get(\"Content-Length\"));"
            ]
          }
        }
      ]
    },
    {
      "name": "HEAD / (compare to GET /)",
      "request": {
        "method": "HEAD",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": [""]
        }
      },
      "description": "HEAD for root, compare headers to GET /",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type matches GET /\", function () {",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(pm.environment.get(\"index_content_type\"));",
              "});",
              "pm.test(\"Content-Length matches GET /\", function () {",
              "    pm.expect(pm.response.headers.get(\"Content-Length\")).to.eql(pm.environment.get(\"index_content_length\"));",
              "});",
              "pm.test(\"Body is empty for HEAD\", function () {",
              "    pm.response.to.have.body(\"\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET /about.html?lang=fr",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/about.html?lang=fr",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["about.html"]
        }
      },
      "description": "Loads about.fr.html",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type is text/html\", function () {",
              "    pm.response.to.have.header(\"Content-Type\", \"text/html\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT /data.txt (create new file)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "Hello world" },
        "url": {
          "raw": "http://localhost:8080/data.txt",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data.txt"]
        }
      },
      "description": "Tests file creation for .txt",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Content-Type is text/plain\", function () {",
              "    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /data.txt (file exists)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/data.txt",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data.txt"]
        }
      },
      "description": "Tests deletion for .txt",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT /data.html (create new file)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/html" }],
        "body": { "mode": "raw", "raw": "<html><body>Hello HTML</body></html>" },
        "url": {
          "raw": "http://localhost:8080/data.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data.html"]
        }
      },
      "description": "Tests file creation for .html",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Content-Type is text/plain\", function () {",
              "    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /data.html (file exists)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/data.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data.html"]
        }
      },
      "description": "Tests deletion for .html",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT /index.html (should fail)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/html" }],
        "body": { "mode": "raw", "raw": "<html><body>Should Fail</body></html>" },
        "url": {
          "raw": "http://localhost:8080/index.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["index.html"]
        }
      },
      "description": "Should fail for index.html PUT",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /index.html (should fail)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/index.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["index.html"]
        }
      },
      "description": "Should fail for index.html DELETE",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT /about.html (should fail)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/html" }],
        "body": { "mode": "raw", "raw": "<html><body>Should Fail</body></html>" },
        "url": {
          "raw": "http://localhost:8080/about.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["about.html"]
        }
      },
      "description": "Should fail for about.html PUT",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /about.html (should fail)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/about.html",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["about.html"]
        }
      },
      "description": "Should fail for about.html DELETE",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "POST /echo (missing body)",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "" },
        "url": {
          "raw": "http://localhost:8080/echo",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["echo"]
        }
      },
      "description": "POST /echo with empty body",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Body is empty\", function () {",
              "    pm.response.to.have.body(\"\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "POST /echo",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "This is a test body" },
        "url": {
          "raw": "http://localhost:8080/echo",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["echo"]
        }
      },
      "description": "POST /echo with body",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type is text/plain\", function () {",
              "    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
              "});",
              "pm.test(\"Body matches input\", function () {",
              "    pm.response.to.have.body(\"This is a test body\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "POST /unknown",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "Some data" },
        "url": {
          "raw": "http://localhost:8080/unknown",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["unknown"]
        }
      },
      "description": "Invalid POST endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT / (root, invalid)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "Should fail" },
        "url": {
          "raw": "http://localhost:8080/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": [""]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "TRACE /trace (custom header, with body)",
      "request": {
        "method": "TRACE",
        "header": [{ "key": "X-Test-Header", "value": "TraceValue" }],
        "body": { "mode": "raw", "raw": "Trace body content" },
        "url": {
          "raw": "http://localhost:8080/trace",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["trace"]
        }
      },
      "description": "Test echoing with headers and body",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Body contains custom header\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"X-Test-Header: TraceValue\");",
              "});",
              "pm.test(\"Body contains trace body content\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"Trace body content\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "TRACE /trace (empty body, custom header)",
      "request": {
        "method": "TRACE",
        "header": [{ "key": "X-Empty-Header", "value": "EmptyValue" }],
        "body": { "mode": "raw", "raw": "" },
        "url": {
          "raw": "http://localhost:8080/trace",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["trace"]
        }
      },
      "description": "Confirm empty body + headers echo",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Body contains custom header\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"X-Empty-Header: EmptyValue\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "OPTIONS / (root)",
      "request": {
        "method": "OPTIONS",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": [""]
        }
      },
      "description": "Minimal OPTIONS test for root path",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Allow header present\", function () {",
              "    pm.expect(pm.response.headers.has(\"Allow\")).to.be.true;",
              "});",
              "pm.test(\"Allow header lists methods\", function () {",
              "    pm.expect(pm.response.headers.get(\"Allow\")).to.include(\"OPTIONS\");",
              "    pm.expect(pm.response.headers.get(\"Allow\")).to.include(\"GET\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "OPTIONS /data",
      "request": {
        "method": "OPTIONS",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/data",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data"]
        }
      },
      "description": "Minimal OPTIONS test for /data path",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Allow header present\", function () {",
              "    pm.expect(pm.response.headers.has(\"Allow\")).to.be.true;",
              "});",
              "pm.test(\"Allow header lists methods\", function () {",
              "    pm.expect(pm.response.headers.get(\"Allow\")).to.include(\"OPTIONS\");",
              "    pm.expect(pm.response.headers.get(\"Allow\")).to.include(\"GET\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET /doesnotexist (404)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/doesnotexist",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["doesnotexist"]
        }
      },
      "description": "GET for a non-existent file, should return 404",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "HEAD /doesnotexist (404)",
      "request": {
        "method": "HEAD",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/doesnotexist",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["doesnotexist"]
        }
      },
      "description": "HEAD for a non-existent file, should return 404",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /doesnotexist (404)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/doesnotexist",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["doesnotexist"]
        }
      },
      "description": "DELETE for a non-existent file, should return 404",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "POST /echo (unsupported Content-Type)",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{\"test\":123}" },
        "url": {
          "raw": "http://localhost:8080/echo",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["echo"]
        }
      },
      "description": "POST /echo with unsupported Content-Type, should return 400",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT /data?foo=bar (query param ignored)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "text/plain" }],
        "body": { "mode": "raw", "raw": "Query param test" },
        "url": {
          "raw": "http://localhost:8080/data?foo=bar",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data"],
          "query": [{ "key": "foo", "value": "bar" }]
        }
      },
      "description": "PUT with query param, should succeed or ignore param",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect([200,201]).to.include(pm.response.code);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "DELETE /data?foo=bar (query param ignored)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/data?foo=bar",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["data"],
          "query": [{ "key": "foo", "value": "bar" }]
        }
      },
      "description": "DELETE with query param, should succeed or ignore param",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "   pm.expect([200]).to.include(pm.response.code);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "GET /about?lang=xx (unsupported lang)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/about?lang=xx",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["about"],
          "query": [{ "key": "lang", "value": "xx" }]
        }
      },
      "description": "GET with unsupported lang, should fallback to english",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "   pm.expect([200]).to.include(pm.response.code);",
              "});"
            ]
          }
        }
      ]
    }
  ]
}